MODULE Backup; (*JG 31.3.95*)

	IMPORT SYSTEM, DOS, Diskette, Viewers, MenuViewers, Oberon, Texts, TextFrames;

    CONST StandardMenu = "System.Close System.Copy System.Grow Edit.Search Edit.Store";

	VAR W: Texts.Writer; diroption: CHAR;

	PROCEDURE Format*;
      VAR R: Texts.Reader; ch: CHAR;
	BEGIN
      Texts.WriteString(W, "Backup.Format ");
      Texts.OpenReader(R, Oberon.Par.text, Oberon.Par.pos); Texts.Read(R, ch);
      IF (ch = "%") OR (ch = "/") THEN Texts.Read(R, ch) ELSE ch := "D" END;
      Texts.Write(W, ch); Texts.Append(Oberon.Log, W.buf);
      DOS.Format(ch);
      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
	END Format;

	PROCEDURE InitOberon*;
      VAR S: Texts.Scanner; i: INTEGER;
	BEGIN
      Texts.WriteString(W, "Backup.InitOberon ");
      Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
      IF (S.line = 0) & ((S.class = Texts.Name) OR (S.class = Texts.String)) THEN
        Texts.WriteString(W, S.s)
      ELSE (*init to old format*) i := 0;
        REPEAT S.s[i] := 0FFX; INC(i) UNTIL i = 11;
        S.s[11] := 8X; S.s[12] := 0X
      END;
      Diskette.InitOberonVol(S.s);
      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
	END InitOberon;

	PROCEDURE InitDOS*;
      VAR S: Texts.Scanner;
	BEGIN
      Texts.WriteString(W, "Backup.InitDOS ");
      Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
      IF S.class = Texts.Name THEN Texts.WriteString(W, S.s) ELSE S.s[0] := 0X END;
      Diskette.InitDOSVol(S.s);
      Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
	END InitDOS;

    PROCEDURE ListEntry (name: ARRAY OF CHAR; date, time: LONGINT; size: LONGINT);
    BEGIN
	    Texts.WriteString(W, name);
        IF diroption = "d" THEN
          Texts.WriteDate(W, time, date); Texts.Write(W, " "); Texts.WriteInt(W, size, 1)
        END;
	    Texts.WriteLn(W)
    END ListEntry;

	PROCEDURE Directory*;
		VAR par: Oberon.ParList; T: Texts.Text; R: Texts.Reader; V: Viewers.Viewer;
          freeEntries, freeSpace, X, Y: INTEGER; ch: CHAR;
	BEGIN
		par := Oberon.Par;
		Texts.OpenReader(R, par.text, par.pos); Texts.Read(R, ch);
		IF (ch = "%") OR (ch = "/") THEN Texts.Read(R, diroption) ELSE diroption := 0X END;
        Diskette.OpenVol(freeEntries, freeSpace);
        Texts.WriteString(W, "free ");
        Texts.WriteInt(W, freeEntries, 1); Texts.WriteString(W, " entries/ ");
        Texts.WriteInt(W, freeSpace, 1); Texts.WriteString(W, " KB");
        Texts.WriteLn(W);
		Diskette.Enumerate(ListEntry);
        Diskette.CloseVol;
        T := TextFrames.Text("");
		Texts.Append(T, W.buf);
		Oberon.AllocateSystemViewer(Oberon.Par.vwr.X, X, Y);
		V := MenuViewers.New(
          TextFrames.NewMenu("Backup.Directory", StandardMenu),
          TextFrames.NewText(T, 0),
          TextFrames.menuH,
          X, Y)
	END Directory;

    PROCEDURE ReadFile (name: ARRAY OF CHAR);
    BEGIN
	    Texts.WriteString(W, name); Texts.WriteString(W, " reading");
	    Texts.Append(Oberon.Log, W.buf);
        Diskette.ReadFile(name);
        IF Diskette.res # 0 THEN Texts.WriteString(W, " failed") END;
	    Texts.WriteLn(W);
        Texts.Append(Oberon.Log, W.buf)
    END ReadFile;

	PROCEDURE ReadFiles*;
		VAR par: Oberon.ParList; S: Texts.Scanner; T: Texts.Text;
        beg, end, time: LONGINT; freeEntries, freeSpace: INTEGER;
	BEGIN
		Diskette.OpenVol(freeEntries, freeSpace);
		par := Oberon.Par;
		Texts.OpenScanner(S, par.text, par.pos); Texts.Scan(S);
        WHILE S.class = Texts.Name DO ReadFile(S.s); Texts.Scan(S) END;
        IF (S.class = Texts.Char) & (S.c = "^") THEN Oberon.GetSelection(T, beg, end, time);
          IF time >= 0 THEN Texts.OpenScanner(S, T, beg); Texts.Scan(S);
            IF S.class = Texts.Name THEN ReadFile(S.s) END
          END
        END;
        Diskette.CloseVol
	END ReadFiles;

    PROCEDURE ReadEntry (name: ARRAY OF CHAR; date, time: LONGINT; size: LONGINT);
    BEGIN
        IF size # 0 THEN
	      Texts.WriteString(W, name); Texts.WriteString(W, " reading");
		  Texts.Append(Oberon.Log, W.buf);
          Diskette.ReadFile(name);
          IF Diskette.res # 0 THEN Texts.WriteString(W, " failed") END;
	  	Texts.WriteLn(W);
          Texts.Append(Oberon.Log, W.buf)
        END
    END ReadEntry;

	PROCEDURE ReadAll*;
      VAR freeEntries, freeSpace: INTEGER;
	BEGIN
 	   Texts.WriteString(W, "Backup.ReadAll"); Texts.WriteLn(W);
		Texts.Append(Oberon.Log, W.buf);
		Diskette.OpenVol(freeEntries, freeSpace);
        Diskette.Enumerate(ReadEntry);
        Diskette.CloseVol
	END ReadAll;

    PROCEDURE WriteFile (VAR name: ARRAY OF CHAR);
    BEGIN
		Texts.WriteString(W, name); Texts.WriteString(W, " writing");
	    Texts.Append(Oberon.Log, W.buf);
        Diskette.WriteFile(name);
        IF Diskette.res # 0 THEN Texts.WriteString(W, " failed") END;
		Texts.WriteLn(W);
        Texts.Append(Oberon.Log, W.buf)
    END WriteFile;

	PROCEDURE WriteFiles*;
		VAR par: Oberon.ParList; S: Texts.Scanner; T: Texts.Text;
           beg, end, time: LONGINT; freeEntries, freeSpace: INTEGER;
	BEGIN
		Diskette.OpenVol(freeEntries, freeSpace);
		par := Oberon.Par;
		Texts.OpenScanner(S, par.text, par.pos); Texts.Scan(S);
	    WHILE S.class = Texts.Name DO WriteFile(S.s); Texts.Scan(S) END;
        IF (S.class = Texts.Char) & (S.c = "^") THEN Oberon.GetSelection(T, beg, end, time);
          IF time >= 0 THEN Texts.OpenScanner(S, T, beg); Texts.Scan(S);
            IF S.class = Texts.Name THEN WriteFile(S.s) END
          END
        END;
		Diskette.CloseVol
	END WriteFiles;

    PROCEDURE DeleteFile (VAR name: ARRAY OF CHAR);
    BEGIN
		Texts.WriteString(W, name); Texts.WriteString(W, " deleting");
		Texts.Append(Oberon.Log, W.buf);
		Diskette.DeleteFile(name);
        IF Diskette.res # 0 THEN Texts.WriteString(W, " failed") END;
		Texts.WriteLn(W);
        Texts.Append(Oberon.Log, W.buf)
    END DeleteFile;

	PROCEDURE DeleteFiles*;
		VAR par: Oberon.ParList; T: Texts.Text; S: Texts.Scanner;
          beg, end, time: LONGINT; freeEntries, freeSpace: INTEGER;
	BEGIN
		Diskette.OpenVol(freeEntries, freeSpace);
		par := Oberon.Par;
		Texts.OpenScanner(S, par.text, par.pos); Texts.Scan(S);
		WHILE S.class = Texts.Name DO DeleteFile(S.s); Texts.Scan(S) END;
        IF (S.class = Texts.Char) & (S.c = "^") THEN Oberon.GetSelection(T, beg, end, time);
          IF time >= 0 THEN Texts.OpenScanner(S, T, beg); Texts.Scan(S);
            IF S.class = Texts.Name THEN DeleteFile(S.s) END
          END
        END;
		Diskette.CloseVol
	END DeleteFiles;

    PROCEDURE SetDriveA*;
    BEGIN DOS.Drive := 0
    END SetDriveA;

    PROCEDURE SetDriveB*;
    BEGIN DOS.Drive := 1
    END SetDriveB;

BEGIN Texts.OpenWriter(W); DOS.ResetDrive
END Backup.



