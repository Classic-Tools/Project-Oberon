(*$C OBERON System 3, version 2.0.

Copyright 1996 Team of the Institute of Computer Systems of ETH Zurich, ETH Center, CH-8092 Zurich,
e-mail: oberon@inf.ethz.ch.

This module may be used under the conditions of the general Oberon System 3 license contract.
The full text can be downloaded from ftp://ftp.inf.ethz.ch/pub/software/Oberon/System3/License.Text
or requested from the above mentioned address.

Under the license terms dated it is in particular (a) prohibited to modify the interface of this module
in any way that disagrees with style or content of the system and (b) requested to provide all conversions
of the source code to another platform with the name OBERON. *)

MODULE EditTools; 	(** CAS/HM 3.12.93  jm 3.5.95 ported/extended to System 3 /  tk 6.2.96**)

IMPORT
	Objects, Texts, Oberon, Fonts, Files, Display, Attributes, Gadgets, Documents, TextGadgets, TextDocs, Desktops;

CONST
	CR = 0DX; TAB = 9X;
	
VAR
	W, WR: Texts.Writer;
	lastTime: LONGINT;

	PROCEDURE Plural (n: LONGINT; s: ARRAY OF CHAR);
	BEGIN Texts.WriteInt(W, n, 0); Texts.Write(W, " "); Texts.WriteString(W, s);
		IF n # 1 THEN Texts.Write(W, "s") END;
		Texts.Append(Oberon.Log, W.buf);
	END Plural;

	PROCEDURE SkipArrow (VAR S: Texts.Scanner);
	BEGIN Texts.Scan(S);
		IF (S.class = Texts.Char) & (S.c = "=") THEN Texts.Scan(S);
			IF (S.class = Texts.Char) & (S.c = ">") THEN Texts.Scan(S) ELSE S.class := Texts.Inval END
		ELSE S.class := Texts.Inval 
		END
	END SkipArrow;
			
	(* string primitives *)

	PROCEDURE SplitFontName (fn: ARRAY OF CHAR; VAR i, j, size: INTEGER);
		VAR k: INTEGER;
	BEGIN i := 0; size := 0;
		WHILE (fn[i] # 0X) & ((fn[i] < "0") OR ("9" < fn[i])) DO INC(i) END;
		j := i; WHILE ("0" <= fn[j]) & (fn[j] <= "9") DO INC(j) END;
		k := i; WHILE k < j DO size := size * 10 + ORD(fn[k]) - 30H; INC(k) END
	END SplitFontName;

	PROCEDURE CombineFontName (prefix, suffix: ARRAY OF CHAR; i, j, size: INTEGER; VAR fn: ARRAY OF CHAR);
		VAR k: INTEGER; ch: CHAR; dig: ARRAY 10 OF CHAR;
	BEGIN COPY(prefix, fn); k := 0;
		REPEAT dig[k] := CHR(size MOD 10 + 30H); size := size DIV 10; INC(k) UNTIL size = 0;
		REPEAT DEC(k); fn[i] := dig[k]; INC(i) UNTIL k = 0;
		REPEAT ch := suffix[j]; fn[i] := ch; INC(i); INC(j) UNTIL ch = 0X
	END CombineFontName;

	PROCEDURE ReadName (t: Texts.Text; pos: LONGINT; VAR name: ARRAY OF CHAR);	(*ww 21 Aug 91/mh 6 Nov 92*)
		VAR i: INTEGER; r: Texts.Reader; ch: CHAR;
	BEGIN Texts.OpenReader(r, t, pos); i := 0;
		REPEAT Texts.Read(r, ch) UNTIL (ch > " ") OR (ch = 0AX) OR (ch = 0DX);
		IF ~r.eot & (ch = 22X) THEN HALT(99); Texts.Read(r, ch) END;
		WHILE ~r.eot & (ch > " ") DO name[i] := ch; Texts.Read(r, ch); INC(i) END;
		IF (i > 0) & (name[i-1] = 22X) THEN DEC(i) END;
		name[i] := 0X
	END ReadName;

	PROCEDURE IsFont(lib: Objects.Library): BOOLEAN;
	BEGIN RETURN (lib # NIL) & (lib IS Fonts.Font)
	END IsFont;
	
	(** text manipulation **)

	PROCEDURE IncFontSize* (T: Texts.Text; beg, end: LONGINT; delta: INTEGER);
		VAR R: Texts.Reader; fnt: Objects.Library; fn: Objects.Name; org: LONGINT; i, j, size: INTEGER; ch: CHAR;
	BEGIN Texts.OpenReader(R, T, beg); Texts.Read(R, ch);
		WHILE ~R.eot & (beg < end) DO org := beg;
			fnt := R.lib;
			WHILE ~R.eot & (beg < end) & (R.lib = fnt) DO INC(beg); Texts.Read(R, ch) END;
			IF IsFont(fnt) THEN SplitFontName(fnt.name, i, j, size);
				IF i < j THEN CombineFontName(fnt.name, fnt.name, i, j, size + delta, fn); fnt := Fonts.This(fn);
					IF fnt.name = fn THEN Texts.ChangeLooks(T, org, beg, {0}, fnt, 0, 0) END
				END
			END
		END
	END IncFontSize;

	PROCEDURE ChangeFontSize* (T: Texts.Text; beg, end: LONGINT; old, new: INTEGER);
		VAR R: Texts.Reader; fnt: Objects.Library; fn: Objects.Name; org: LONGINT; i, j, size: INTEGER; ch: CHAR;
	BEGIN Texts.OpenReader(R, T, beg); Texts.Read(R, ch);
		WHILE ~R.eot & (beg < end) DO org := beg; fnt := R.lib;
			WHILE ~R.eot & (beg < end) & (R.lib = fnt) DO INC(beg); Texts.Read(R, ch) END;
			IF IsFont(fnt) THEN
				SplitFontName(fnt.name, i, j, size);
				IF (i < j) & ((size = old) OR (old = -1)) THEN
					CombineFontName(fnt.name, fnt.name, i, j, new, fn); fnt := Fonts.This(fn);
					IF fnt.name = fn THEN Texts.ChangeLooks(T, org, beg, {0}, fnt, 0, 0) END
				END
			END
		END
	END ChangeFontSize;

	PROCEDURE ChangeFontFamily* (T: Texts.Text; beg, end: LONGINT; old, new: ARRAY OF CHAR);
		VAR R: Texts.Reader; fnt: Objects.Library; fn: Objects.Name; org: LONGINT; i, i1, j, j1, size, size1: INTEGER; ch: CHAR;
	BEGIN Texts.OpenReader(R, T, beg); Texts.Read(R, ch);
		WHILE ~R.eot & (beg < end) DO org := beg; fnt := R.lib;
			WHILE ~R.eot & (beg < end) & (R.lib = fnt) DO INC(beg); Texts.Read(R, ch) END;
			IF IsFont(fnt) THEN SplitFontName(fnt.name, i, j, size); COPY(fnt.name, fn); fn[i] := 0X;
				IF (i < j) & ((fn = old) OR (old[0] = "?")) THEN SplitFontName(new, i1, j1, size1);
					CombineFontName(new, fnt.name, i1, j, size, fn); fnt := Fonts.This(fn);
					IF fnt.name = fn THEN Texts.ChangeLooks(T, org, beg, {0}, fnt, 0, 0) END
				END
			END
		END
	END ChangeFontFamily;

	PROCEDURE ChangeFontStyle* (T: Texts.Text; beg, end: LONGINT; old, new: CHAR);
		VAR R: Texts.Reader; fnt: Objects.Library; fn: Objects.Name; org: LONGINT; i, j, k, size: INTEGER; ch: CHAR;
	BEGIN Texts.OpenReader(R, T, beg); Texts.Read(R, ch);
		WHILE ~R.eot & (beg < end) DO org := beg; fnt := R.lib;
			WHILE ~R.eot & (beg < end) & (R.lib = fnt) DO INC(beg); Texts.Read(R, ch) END;
			IF IsFont(fnt) THEN
				SplitFontName(fnt.name, i, j, size);
				IF (i < j) & ((fnt.name[j] = old) OR (old = "?")) & (fnt.name[j] # new) THEN COPY(fnt.name, fn);
					IF fn[j] = "." THEN k := j+1;
						WHILE fn[k] # 0X DO INC(k) END;
						WHILE k >= j DO fn[k+1] := fn[k]; DEC(k) END
					ELSIF new = "." THEN k := j;
						REPEAT fn[k] := fn[k+1]; INC(k) UNTIL fn[k] = 0X
					END;
					fn[j] := new; fnt := Fonts.This(fn);
					IF fnt.name = fn THEN Texts.ChangeLooks(T, org, beg, {0}, fnt, 0, 0) END
				END
			END
		END
	END ChangeFontStyle;

	PROCEDURE ChangeFont* (T: Texts.Text; beg, end: LONGINT; old, new: ARRAY OF CHAR);
		VAR R: Texts.Reader; fnt: Objects.Library; org: LONGINT; ch: CHAR;
	BEGIN Texts.OpenReader(R, T, beg); Texts.Read(R, ch);
		WHILE ~R.eot & (beg < end) DO org := beg; fnt := R.lib;
			WHILE ~R.eot & (beg < end) & (R.lib = fnt) DO INC(beg); Texts.Read(R, ch) END;
			IF IsFont(fnt) THEN
				IF fnt.name = old THEN fnt := Fonts.This(new);
					IF fnt.name = new THEN Texts.ChangeLooks(T, org, beg, {0}, fnt, 0, 0) END
				END
			END
		END
	END ChangeFont;

	PROCEDURE IncSize*;	(** size; selection **)
		VAR S: Texts.Scanner; text: Texts.Text; beg, end, time: LONGINT;
	BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
		Oberon.GetSelection(text, beg, end, time);
		IF (time >= lastTime) & (S.class = Texts.Int) & (S.line = 0) & (-1000 <= S.i) & (S.i < 1000) THEN lastTime := time;
			IncFontSize(text, beg, end, SHORT(S.i))
		END
	END IncSize;

	PROCEDURE ChangeSize*;	(** {old "=>" new}, selection **)
		VAR S: Texts.Scanner; text: Texts.Text; beg, end, time: LONGINT; old: INTEGER;
	BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
		Oberon.GetSelection(text, beg, end, time);
		IF (time >= lastTime) & (S.line = 0) THEN
			WHILE ~S.eot & ((S.class = Texts.Int) & (-1000 <= S.i) & (S.i < 1000) OR (S.class = Texts.Char) & (S.c = "?")) DO
				IF (S.class = Texts.Char) & (S.c = "?") THEN old := -1 ELSE old := SHORT(S.i) END;
				SkipArrow(S);
				IF (S.class = Texts.Int) & (-1000 <= S.i) & (S.i < 1000) THEN lastTime := time;
					ChangeFontSize(text, beg, end, old, SHORT(S.i)); Texts.Scan(S)
				END
			END
		END
	END ChangeSize;

	PROCEDURE ChangeStyle*;	(** {old "=>" new}, selection **)
		VAR S: Texts.Scanner; text: Texts.Text; beg, end, time: LONGINT; old, new: CHAR;
	BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
		Oberon.GetSelection(text, beg, end, time);
		IF (time >= lastTime) & (S.line = 0) THEN
			WHILE ~S.eot & ((S.class = Texts.Name) OR (S.class = Texts.Char)) DO
				IF S.class = Texts.Char THEN old := S.c ELSE old := S.s[0] END;
				SkipArrow(S);
				IF (S.class = Texts.Name) OR (S.class = Texts.Char) THEN lastTime := time;
					IF S.class = Texts.Char THEN new := S.c ELSE new := S.s[0] END;
					ChangeFontStyle(text, beg, end, old, new); Texts.Scan(S)
				END
			END
		END
	END ChangeStyle;

	PROCEDURE ChangeFamily*;	(** {old "=>" new}, selection **)
		VAR S: Texts.Scanner; text: Texts.Text; beg, end, time: LONGINT; old: Objects.Name;
	BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
		Oberon.GetSelection(text, beg, end, time);
		IF (time >= lastTime) & (S.line = 0) THEN
			WHILE ~S.eot & ((S.class = Texts.Name) OR (S.class = Texts.Char) & (S.c = "?")) DO
				IF (S.class = Texts.Char) & (S.c = "?") THEN old[0] := "?"; old[1] := 0X ELSE COPY(S.s, old) END;
				SkipArrow(S);
				IF S.class = Texts.Name THEN lastTime := time;
					ChangeFontFamily(text, beg, end, old, S.s); Texts.Scan(S)
				END
			END
		END
	END ChangeFamily;

	PROCEDURE Change*;	(** {old "=>" new}, selection **)
		VAR S: Texts.Scanner; text: Texts.Text; beg, end, time: LONGINT; old: Objects.Name;
	BEGIN Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
		Oberon.GetSelection(text, beg, end, time);
		IF (time >= lastTime) & (S.line = 0) THEN
			WHILE S.class = Texts.Name DO COPY(S.s, old); SkipArrow(S);
				IF S.class = Texts.Name THEN lastTime := time;
					ChangeFont(text, beg, end, old, S.s); Texts.Scan(S)
				END
			END
		END
	END Change;

	PROCEDURE OpenAscii*;
	VAR S: Attributes.Scanner; F: Files.File; R: Files.Rider; T: Texts.Text; ch: CHAR;
		D: Documents.Document; f: TextGadgets.Frame;
	BEGIN
		Attributes.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos);
		Attributes.Scan(S);
		IF S.class IN {Attributes.Name, Attributes.String} THEN
			NEW(T); Texts.Open(T, "");
			F := Files.Old(S.s);
			IF F # NIL THEN
				Files.Set(R, F, 0);
				Files.Read(R, ch);
				WHILE ~R.eof DO
					IF ch # 0AX THEN Texts.Write(W, ch) END;
					Files.Read(R, ch);
				END;
				Texts.Append(T, W.buf)
			END;
			NEW(D); TextDocs.InitDoc(D); (* make document wrapper *)
			NEW(f); TextGadgets.Init(f, T, FALSE);	(* create content *)
			Documents.Init(D, f); (* and merge together *)
			COPY(S.s, D.name);
			D.W := Display.Width DIV 8 * 3 + 20;
			Desktops.ShowDoc(D)
		END
	END OpenAscii;
	
	PROCEDURE OpenUnix*;
	VAR S: Attributes.Scanner; F: Files.File; R: Files.Rider; T: Texts.Text; ch: CHAR;
		D: Documents.Document; f: TextGadgets.Frame;
	BEGIN
		Attributes.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos);
		Attributes.Scan(S);
		IF S.class IN {Attributes.Name, Attributes.String} THEN
			NEW(T); Texts.Open(T, "");
			F := Files.Old(S.s);
			IF F # NIL THEN
				Files.Set(R, F, 0);
				Files.Read(R, ch);
				WHILE ~R.eof DO
					IF ch = 0AX THEN ch := 0DX END;
					Texts.Write(W, ch);
					Files.Read(R, ch);
				END;
				Texts.Append(T, W.buf)
			END;
			NEW(D); TextDocs.InitDoc(D); (* make document wrapper *)
			NEW(f); TextGadgets.Init(f, T, FALSE);	(* create content *)
			Documents.Init(D, f); (* and merge together *)
			COPY(S.s, D.name);
			D.W := Display.Width DIV 8 * 3 + 20;
			Desktops.ShowDoc(D)
		END
	END OpenUnix;

	PROCEDURE store(unix: BOOLEAN);
	VAR S: Attributes.Scanner; D: Documents.Document; L: Objects.LinkMsg;
		R: Texts.Reader; F: Files.File; r: Files.Rider; bak: ARRAY 64 OF CHAR; ch: CHAR;
		i, res: INTEGER;
	BEGIN
		Attributes.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos);
		Attributes.Scan(S);
		IF (S.class = Attributes.Char) & (S.c = "*") THEN D := Documents.MarkedDoc()
		ELSE D := Desktops.CurDoc(Gadgets.context)
		END;
		IF (D # NIL) & (D.dsc # NIL) THEN
			IF D.name # "" THEN
				L.id := Objects.get; L.name := "Model"; L.obj := NIL; L.res := -1; D.dsc.handle(D.dsc, L);
				IF (L.obj # NIL) & (L.obj IS Texts.Text) THEN
					IF unix THEN
						Texts.WriteString(W, "EditTools.StoreUnix ");
					ELSE
						Texts.WriteString(W, "EditTools.StoreAscii ");
					END;
					Texts.Append(Oberon.Log, W.buf);
					
					F := Files.New(D.name); IF F = NIL THEN HALT(99) END;
					
					COPY(D.name, bak); i := 0;
					WHILE bak[i] # 0X DO INC(i) END;
					bak[i] := "."; bak[i+1] := "B"; bak[i+2] := "a"; bak[i+3] := "k"; bak[i+4] := 0X;
					Files.Rename(D.name, bak, res);
					
					Files.Set(r, F, 0);
					Texts.OpenReader(R, L.obj(Texts.Text), 0);
					Texts.Read(R, ch);
					WHILE ~R.eot DO
						IF (R.lib # NIL) & (R.lib IS Fonts.Font) THEN
							IF ch = 0DX THEN
								IF ~unix THEN Files.Write(r, ch) END;
								ch := 0AX
							END;
							Files.Write(r, ch)
						END;
						Texts.Read(R, ch)
					END;
					Files.Register(F);
					Texts.WriteString(W, D.name); Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
				END
			ELSE Texts.WriteString(W, "  untitled document"); Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
			END
		END
	END store;

	PROCEDURE StoreAscii*;
	BEGIN store(FALSE)
	END StoreAscii;
	
	PROCEDURE StoreUnix*;
	BEGIN store(TRUE)
	END StoreUnix;

	PROCEDURE RemoveObjects*;
	VAR D: Documents.Document; L: Objects.LinkMsg; R: Texts.Reader; ch: CHAR; pos: LONGINT;
	BEGIN
		D := Documents.MarkedDoc();
		IF (D # NIL) & (D.dsc # NIL) THEN
			L.id := Objects.get; L.name := "Model"; L.obj := NIL; L.res := -1; D.dsc.handle(D.dsc, L);
			IF (L.obj # NIL) & (L.obj IS Texts.Text) THEN
				Texts.OpenReader(R, L.obj(Texts.Text), 0);
				pos := 0;
				Texts.Read(R, ch);
				WHILE ~R.eot DO
					IF (R.lib # NIL) & ~(R.lib IS Fonts.Font) THEN
						Texts.Delete(L.obj(Texts.Text), pos, pos+1); Texts.OpenReader(R, L.obj(Texts.Text), pos)
					ELSE INC(pos); 
					END;
					Texts.Read(R, ch)
				END
			END
		END
	END RemoveObjects;

	PROCEDURE Count* (T: Texts.Text; beg, end: LONGINT; VAR wc, pc, ec: LONGINT);
		VAR R: Texts.Reader; ch: CHAR;
	BEGIN wc:=0; pc:=0; ec:=0;
		Texts.OpenReader(R, T, beg); Texts.Read(R, ch); INC(beg);
		WHILE beg <= end DO
			WHILE (beg <= end) & (ch <= " ") DO
				IF (R.lib # NIL) & ~(R.lib IS Fonts.Font) THEN INC(ec)
				ELSIF ch=CR THEN INC(pc)
				END;
				Texts.Read(R, ch); INC(beg)
			END;
			IF beg <= end THEN INC(wc);
				WHILE (beg <= end) & (ch > " ") DO Texts.Read(R, ch); INC(beg) END
			END
		END
	END Count;
	
	PROCEDURE GetMainArg (VAR S: Texts.Scanner; VAR beg, end: LONGINT);
		VAR text: Texts.Text; sbeg, send, time: LONGINT;
	BEGIN beg:=Oberon.Par.pos; end:=Oberon.Par.text.len;
		Texts.OpenScanner(S, Oberon.Par.text, Oberon.Par.pos); Texts.Scan(S);
		IF (S.class=Texts.Char) & (S.line=0) & (S.c="^") THEN Oberon.GetSelection(text, sbeg, send, time);
			IF time >= 0 THEN beg:=sbeg; end:=send; Texts.OpenScanner(S, text, beg); Texts.Scan(S) END
		END
	END GetMainArg;

	PROCEDURE Words*;	(** "@" | ("^" | "*" ) **)
		VAR S: Texts.Scanner; D: Documents.Document; text: Texts.Text; L: Objects.LinkMsg; 
			cc, ct, wc, wt, pc, pt, ec, et, beg1, end1, beg, end, time: LONGINT;
	BEGIN GetMainArg(S, beg1, end1); D:=Documents.MarkedDoc(); Oberon.GetSelection(text, beg, end, time);
		ct:=0; wt:=0; pt:=0; et:=0;
		IF (S.class=Texts.Char) & (S.c="*") & (D # NIL) THEN Texts.WriteString(W, "EditTools.Words  *"); Texts.WriteLn(W);
			L.id := Objects.get; L.name := "Model"; L.obj := NIL; L.res := -1; D.dsc.handle(D.dsc, L);
			IF (L.obj # NIL) & (L.obj IS Texts.Text) THEN
				cc:=L.obj(Texts.Text).len; Count(L.obj(Texts.Text), 0, cc, wc, pc, ec);
				Plural(pc, "CR"); Texts.WriteLn(W); Plural(wc, "word"); Texts.WriteLn(W); Plural(cc, "char"); Texts.WriteLn(W); 
				Plural(ec, "object"); Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf);
			END;
		ELSIF (S.class=Texts.Char) & (S.c="@") & (time >= 0) THEN Texts.WriteString(W, "EditTools.Words  @"); Texts.WriteLn(W);
			cc:=end - beg; Count(text, beg, end, wc, pc, ec);
			Plural(pc, "CR"); Texts.WriteLn(W); Plural(wc, "word"); Texts.WriteLn(W); Plural(cc, "char"); Texts.WriteLn(W); 
			Plural(ec, "gadget"); Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
		END
	END Words;

BEGIN Texts.OpenWriter(W); Texts.OpenWriter(WR);
END EditTools.
