(*$C OBERON System 3, version 2.0.

Copyright 1996 Team of the Institute of Computer Systems of ETH Zurich, ETH Center, CH-8092 Zurich,
e-mail: oberon@inf.ethz.ch.

This module may be used under the conditions of the general Oberon System 3 license contract.
The full text can be downloaded from ftp://ftp.inf.ethz.ch/pub/software/Oberon/System3/License.Text
or requested from the above mentioned address.

Under the license terms dated it is in particular (a) prohibited to modify the interface of this module
in any way that disagrees with style or content of the system and (b) requested to provide all conversions
of the source code to another platform with the name OBERON. *)

MODULE NetSystem;	(* mg 06.12.95 *)

IMPORT Configuration := Oberon, SYSTEM, Oberon, Input, Texts, DNS, TCP, UDP, Ports, Ip := IP, NetBase, Kernel,
	Strings, Fonts, IP;

CONST
(* C.res values *)
	done* = 0; error* = 1; timeout* = 2;
	
	Trace = FALSE;

(* State() values *)
	closed* = 0; listening* = 1; in* = 2; out* = 3; inout* = 4;

(* any port value *)
	anyport* = 0;

	CR = 0DX;
	LF = 0AX;

TYPE
	IPAdr* = ARRAY Ip.IpAdrLen OF CHAR; (* in network byte ordering *)

	Connection* = POINTER TO ConnectionDesc;
	ConnectionDesc* = RECORD
		port: Ports.Port;
		res*, state: INTEGER;
		Available: PROCEDURE (C: Connection; VAR res: INTEGER): LONGINT;
		Receive: PROCEDURE (C: Connection; VAR buf: ARRAY OF SYSTEM.BYTE; beg, len: LONGINT; VAR res: INTEGER);
		Send: PROCEDURE (C: Connection; VAR buf: ARRAY OF SYSTEM.BYTE; beg, len: LONGINT; VAR res: INTEGER);
	END;

	Socket* = POINTER TO SocketDesc;
	SocketDesc* = RECORD
		C: UDP.Connection;
		res*, state: INTEGER
	END;

	Password = POINTER TO PasswordDesc;
	PasswordDesc = RECORD
		service, user, host, passwd: ARRAY 64 OF CHAR;
		next: Password
	END;

VAR
	hostName*, gateway*: ARRAY 65 OF CHAR;
	hostIP*, anyIP*, allIP*: IPAdr;
	started: BOOLEAN;
	W: Texts.Writer;
	passwords: Password;

(** Retrieve the password for user using service on host.  Parameters service, host and user must be specified. 
Parameter user is in/out.  If empty, it returns the first (user,password) pair found, otherwise it returns the
specified user's password. *)
PROCEDURE GetPassword*(service, host: ARRAY OF CHAR;  VAR user, password: ARRAY OF CHAR);
VAR pass: Password;
BEGIN
	Strings.Lower(service, service);  Strings.Lower(host, host);
	pass := passwords;
	WHILE (pass # NIL) & ~((pass.service = service) & (pass.host = host) & ((user = "") OR (pass.user = user))) DO
		pass := pass.next
	END;
	IF pass # NIL THEN
		COPY(pass.user, user);  COPY(pass.passwd, password)
	ELSE
		IF Trace THEN	(* this message should be displayed by the client module *)
			Texts.WriteString(W, "No password for ");
			IF service # "" THEN Texts.WriteString(W, service);  Texts.WriteString(W, " to ") END;
			IF user # "" THEN Texts.WriteString(W, user);  Texts.Write(W, "@") END;
			Texts.WriteString(W, host);  Texts.WriteLn(W);  Texts.Append(Oberon.Log, W.buf)
		END;
		COPY("", user); COPY("", password)
	END
END GetPassword;

(** Remove password for user using service on host. *)
PROCEDURE DelPassword*(service, user, host: ARRAY OF CHAR);
	VAR ppass, pass: Password;
BEGIN
	Strings.Lower(service, service);  Strings.Lower(host, host);
	ppass := NIL; pass := passwords;
	WHILE (pass # NIL) & ((pass.service # service) & (pass.host # host) & (pass.user # user)) DO
		ppass := pass; pass := pass.next
	END;
	IF pass # NIL THEN
		IF ppass # NIL THEN
			ppass.next := pass.next
		ELSE
			passwords := pass.next
		END
	END
END DelPassword;

(** NetSystem.SetUser { service ":" ["//"] user [ ":" password ] "@" host [ "/" ] } "~" password
		If not specified in-line, enter the password for the (service, host, user) triple. 
		The (service, host, user, password) 4-tuple is stored in memory for retrieval with GetPassword. *)
PROCEDURE SetUser*;
	VAR
		R: Texts.Reader;
		service, usr, host, pwd: ARRAY 64 OF CHAR;
		pass, list: Password;
		ok, verbose: BOOLEAN;
		ch: CHAR;

	PROCEDURE Next(VAR str: ARRAY OF CHAR);
		VAR i: LONGINT;
	BEGIN
		Texts.Read(R, ch);
		WHILE ~R.eot & ((ch <= " ") OR (ch = ":") OR (ch = "@") OR (ch = "/") OR ~(R.lib IS Fonts.Font)) DO
			Texts.Read(R, ch)
		END;
		i := 0;
		WHILE ~R.eot & (ch > " ") & (ch # ":") & (ch # "@") & (ch # "/") & (ch # "~") & (R.lib IS Fonts.Font) DO
			str[i] := ch; INC(i); Texts.Read(R, ch)
		END;
		str[i] := 0X
	END Next;
	
	PROCEDURE ReadPwd;
		VAR i: LONGINT;
	BEGIN
		Texts.WriteString(W, "Password: ");  Texts.Append(Oberon.Log, W.buf);
		Input.Read(ch); i := 0;
		WHILE ch > " " DO
			IF ch = 7FX THEN
				IF i > 0 THEN
					Texts.Delete(Oberon.Log, Oberon.Log.len-1, Oberon.Log.len);
					DEC(i)
				END
			ELSE
				Texts.Write(W, "*");  Texts.Append(Oberon.Log, W.buf);
				pwd[i] := ch;  INC(i)
			END;
			Input.Read(ch)
		END;
		pwd[i] := 0X;
		Texts.WriteLn(W);  Texts.Append(Oberon.Log, W.buf)
	END ReadPwd;
		
	PROCEDURE Replace(p: Password);
	VAR q: Password;
	BEGIN
		q := passwords;
		WHILE (q # NIL) & ~((q.service = p.service) & (q.host = p.host) & (q.user = p.user)) DO
			q := q.next
		END;
		IF verbose THEN
			Texts.WriteString(W, p.service);  Texts.Write(W, ":");  
			Texts.WriteString(W, p.user);  Texts.Write(W, "@");  Texts.WriteString(W, p.host)
		END;
		IF q = NIL THEN
			p.next := passwords;  passwords := p;
			IF verbose THEN Texts.WriteString(W, " password set") END
		ELSE
			COPY(p.passwd, q.passwd);
			IF verbose THEN Texts.WriteString(W, " password replaced") END
		END;
		IF verbose THEN Texts.WriteLn(W);  Texts.Append(Oberon.Log, W.buf) END
	END Replace;
	
BEGIN
	Texts.OpenReader(R, Oberon.Par.text, Oberon.Par.pos);
	ok := TRUE;  verbose := FALSE;  list := NIL;
	WHILE ~R.eot & ok DO
		ok := FALSE;  Next(service);
		IF service = "\v" THEN verbose := TRUE; Next(service) END;
		Strings.Lower(service, service);
		IF ch = ":" THEN
			Next(usr);
			IF ch = "@" THEN	(* no password specified, prompt for password later *)
				Next(host);  Strings.Lower(host, host);
				IF host # "" THEN
					NEW(pass);  pass.next := list;  list := pass;	(* add to temp list *)
					COPY(service, pass.service); COPY(host, pass.host); COPY(usr, pass.user);
					ok := TRUE
				END
			ELSIF ch = ":" THEN	(* password specified in-line *)
				Next(pwd);
				IF ch = "@" THEN
					Next(host);
					IF host # "" THEN
						NEW(pass);  COPY(service, pass.service); COPY(host, pass.host); 
						COPY(usr, pass.user);  COPY(pwd, pass.passwd);
						Replace(pass);  ok := TRUE
					END
				END
			END
		END
	END;
	IF list # NIL THEN
		ReadPwd;
		IF ch = 0DX THEN	(* password entered *)
			WHILE list # NIL DO
				pass := list;  list := list.next;  COPY(pwd, pass.passwd);  Replace(pass)
			END
		END
	END
END SetUser;

(** Clear all passwords from memory. *)

PROCEDURE ClearUser*;
BEGIN
	passwords := NIL
END ClearUser;

PROCEDURE GetEntry (name: ARRAY OF CHAR; VAR hostName, hostIP: ARRAY OF CHAR);
VAR
	S: Texts.Scanner;
	key: ARRAY 64 OF CHAR;
	i, j: INTEGER;
BEGIN key := "NetSystem.Hosts.";
	i := 0; WHILE key[i] # 0X DO INC(i) END;
	j := 0; WHILE name[j] # 0X DO key[i] := name[j]; INC(i); INC(j) END;
	key[i] := 0X; Configuration.OpenScanner(S, key);
	IF S.class IN {Texts.Name, Texts.String} THEN
		COPY(S.s, hostName); Texts.Scan(S)
	ELSE COPY("", hostName)
	END;
	IF (S.class = Texts.Char) & (S.c = ",") THEN Texts.Scan(S);
		IF S.class IN {Texts.Name, Texts.String} THEN COPY(S.s, hostIP)
		ELSE COPY("", hostIP)
		END
	ELSE COPY("", hostIP)
	END
END GetEntry;
	
PROCEDURE ToNum (num: ARRAY OF CHAR; VAR n: INTEGER; VAR done: BOOLEAN);
VAR
	i: INTEGER;
BEGIN n := 0; i := 0;
	WHILE ("0" <= num[i]) & (num[i] <= "9") DO
		n := n * 10 + ORD(num[i]) - ORD("0"); INC(i)
	END;
	done := num[i] = 0X
END ToNum;

PROCEDURE ToHost (num: ARRAY OF CHAR; VAR adr: Ip.IpAdr; VAR done: BOOLEAN);
VAR
	addr: LONGINT;
	buf: ARRAY 32 OF CHAR;
	i, j, k, n: INTEGER;
BEGIN done := TRUE;
	addr := 0; i := 0; j := 0; 
	WHILE done & (j < 4) & (num[i] # 0X) DO
		k := 0;
		WHILE (num[i] # ".") & (num[i] # 0X) DO
			buf[k] := num[i]; INC(k); INC(i)
		END;
		buf[k] := 0X; ToNum(buf, n, done);
		addr := addr * 256 + n; done := done & (n <= 256);
		IF num[i] = "." THEN INC(i) END;
		INC(j)
	END;
	NetBase.Copy(addr, adr, Ip.IpAdrLen); NetBase.HostL2Net(adr);
	done := done & (j = 4) & (num[i] = 0X)
END ToHost;

PROCEDURE GetIP* (name: ARRAY OF CHAR; VAR IP: IPAdr);
VAR
	hostName, hostIP: ARRAY 64 OF CHAR;
	adr: Ip.IpAdr;
	res: INTEGER;
	done: BOOLEAN;
BEGIN
	IF (CAP(name[0]) >= "A") & (CAP(name[0]) <= "Z") THEN
		GetEntry(name, hostName, hostIP);
		IF hostIP # "" THEN
			ToHost(hostIP, adr, done)
		ELSE
			IF hostName # "" THEN
				DNS.HostByName(hostName, adr, res)
			ELSE DNS.HostByName(name, adr, res)
			END;
			done := (res = DNS.Done)
		END
	ELSIF (name[0] >= "0") & (name[0] <= "9") THEN
		ToHost(name, adr, done)
	ELSE done := FALSE
	END;
	IF ~done THEN IP := anyIP
	ELSE NetBase.Copy(adr, IP, Ip.IpAdrLen)
	END
END GetIP;

(** Compare two ip-numbers *)
PROCEDURE SameIP*(IPA, IPB: IPAdr): BOOLEAN;
BEGIN
	RETURN (IPA[0] = IPB[0]) & (IPA[1] = IPB[1]) & (IPA[2] = IPB[2]) & (IPA[3] = IPB[3])
END SameIP;

PROCEDURE CopyIP*(from: IPAdr; VAR to: IPAdr);
BEGIN
	SYSTEM.MOVE(SYSTEM.ADR(from), SYSTEM.ADR(to), IP.IpAdrLen)
END CopyIP;

PROCEDURE GetName* (IP: IPAdr; VAR name: ARRAY OF CHAR);
VAR
	adr: Ip.IpAdr;
	res: INTEGER;
BEGIN NetBase.Copy(IP, adr, Ip.IpAdrLen);
	DNS.HostByNumber(adr, name, res);
	IF res # DNS.Done THEN COPY("", name) END
END GetName;

PROCEDURE Start*;
VAR
	name, num, dns: ARRAY 64 OF CHAR;
	time: LONGINT;
	i, nodns, ct: INTEGER;
	adr: Ip.IpAdr;
	dmy: ARRAY 1 OF SYSTEM.BYTE;
	done: BOOLEAN;
	me: Oberon.Task;
BEGIN
	IF started THEN RETURN END;
	GetEntry("Host", name, num); ToHost(num, Ip.ipadr, done);
	IF done THEN
		NetBase.Copy(Ip.ipadr, hostIP, Ip.IpAdrLen);
		COPY(name, hostName);
		GetEntry("Gateway", name, num); ToHost(num, Ip.gway, done);
		IF done THEN COPY(name, gateway);
			COPY(name, gateway);
			DNS.Init;
			GetEntry("Domain", name, num);
			IF name # "" THEN
				DNS.InstallDom(name)
			ELSE
				DNS.InstallDom("ethz.ch")
			END;
			nodns := 0; i := 1; dns := "DNS1";
			GetEntry(dns, name, num);
			WHILE num # "" DO
				ToHost(num, adr, done);
				IF done THEN
					DNS.InstallDNS(name, adr); INC(nodns)
				ELSE Texts.WriteString(W, dns);
					Texts.Write(W, " "); Texts.WriteString(W, name);
					Texts.WriteString(W, " no ip-number")
				END;
				INC(i); dns[3] := CHR(i+ORD("0"));
				GetEntry(dns, name, num)
			END;
			IF nodns = 0 THEN
				ToHost("129.132.1.11", adr, done); DNS.InstallDNS("dns1.ethz.ch", adr);
				ToHost("129.132.98.12", adr, done); DNS.InstallDNS("dns2.ethz.ch", adr)
			END;
			GetEntry("Netmask", name, num);
			IF num # "" THEN
				ToHost(num, adr, done);
				IF done THEN started := TRUE;
					NetBase.Copy(adr, Ip.subnet, Ip.IpAdrLen)
				END
			END;
			NetBase.Start; Ip.StartTimer(); Ip.StartIp(); Ports.Init(); UDP.Start(); TCP.Start();
			IF ~started THEN time := Input.Time() - 2*Input.TimeUnit; ct := 0;
				REPEAT
					IF Input.Time() - time > 2*Input.TimeUnit THEN
						Ip.IcmpSend(Ip.ipadr, Ip.ipall, Ip.maskrq, 0, 0, 0, dmy);
						time := Input.Time(); INC(ct)
					END;
					NetBase.Demux(me); Ip.IpDemux(me)
				UNTIL ~NetBase.Equal(Ip.subnet, Ip.ipany, Ip.IpAdrLen) OR (ct = 6);
				started :=  ~NetBase.Equal(Ip.subnet, Ip.ipany, Ip.IpAdrLen)
			END;
			IF started THEN Ip.SetDirectedBRC;
				Texts.WriteString(W, "NetSystem started / 06.02.96 MG")
			END
		ELSE Texts.WriteString(W, "Gateway not found")
		END
	ELSE Texts.WriteString(W, "Host not found")
	END;
	Texts.WriteLn(W);
	Texts.Append(Oberon.Log, W.buf)
END Start;

PROCEDURE Stop*;
BEGIN TCP.Stop; UDP.Stop; Ip.StopIp; Ip.StopTimer; NetBase.Stop;
	NetBase.Copy(Ip.ipany, Ip.subnet, Ip.IpAdrLen); started := FALSE;
	Texts.WriteString(W, "NetSystem stopped");
	Texts.WriteLn(W); Texts.Append(Oberon.Log, W.buf)
END Stop;

(* Stream oriented communication *)

PROCEDURE TCPSetState (C: Connection);
BEGIN
	IF ~TCP.Connected(C.port(TCP.Connection)) THEN
		IF C.state = inout THEN C.state := out
		ELSIF C.state = in THEN C.state := closed
		END
	END
END TCPSetState;

PROCEDURE TCPAvailable (C: Connection; VAR res: INTEGER): LONGINT;
VAR
	len: LONGINT;
BEGIN len := TCP.Available(C.port(TCP.Connection));
	IF len < 0 THEN len := 0; res := error ELSE res := done END;
	TCPSetState(C); RETURN len
END TCPAvailable;

PROCEDURE TCPReceive (C: Connection; VAR buf: ARRAY OF SYSTEM.BYTE; beg, len: LONGINT; VAR res: INTEGER);
VAR
	l: LONGINT;
BEGIN l := 0;
	REPEAT l := len;
		TCP.Receive(C.port(TCP.Connection), buf, beg, l);
		IF l > 0 THEN beg := beg + l; len := len - l END
	UNTIL (len = 0) OR (l < 0);
	IF l < 0 THEN res := error ELSE res := done END;
	TCPSetState(C)
END TCPReceive;

PROCEDURE TCPSend (C: Connection; VAR buf: ARRAY OF SYSTEM.BYTE; beg, len: LONGINT; VAR res: INTEGER);
BEGIN TCP.Send(C.port(TCP.Connection), buf, beg, len);
	IF len < 0 THEN res := error ELSE res := done END;
	TCPSetState(C)
END TCPSend;

PROCEDURE DmyAvailable (C: Connection; VAR res: INTEGER): LONGINT;
BEGIN res := error; RETURN 0
END DmyAvailable;

PROCEDURE DmyReceive (C: Connection; VAR buf: ARRAY OF SYSTEM.BYTE; beg, len: LONGINT; VAR res: INTEGER);
BEGIN res := error
END DmyReceive;

PROCEDURE DmySend (C: Connection; VAR buf: ARRAY OF SYSTEM.BYTE; beg, len: LONGINT; VAR res: INTEGER);
BEGIN res := error
END DmySend;

PROCEDURE ^CloseConnection* (C: Connection);

PROCEDURE *Cleanup(c: SYSTEM.PTR);
BEGIN
	WITH c: Connection DO
		IF c.state # closed THEN
			CloseConnection(c)
		END
	END
END Cleanup;

PROCEDURE OpenConnection* (VAR C: Connection; locPort: INTEGER; remIP: IPAdr; remPort: INTEGER; VAR res: INTEGER);
VAR
	conC: TCP.Connection;
	listC: TCP.Listener;
	remAdr: Ip.IpAdr;
	done: BOOLEAN;
BEGIN
	IF started THEN
		NetBase.Copy(remIP, remAdr, Ip.IpAdrLen); NEW(C);
		IF NetBase.Equal(remIP, Ip.ipany, Ip.IpAdrLen) OR (remPort = Ports.anyport) THEN
			TCP.Listen(listC, locPort, remAdr, remPort, C.res);
			IF C.res = TCP.Done THEN C.port := listC;
				C.state := listening; C.Available := DmyAvailable;
				C.Send := DmySend; C.Receive := DmyReceive;
				Kernel.RegisterObject(C, Cleanup)
			ELSIF C.res # TCP.Timeout THEN C.res := error
			END;
			res := C.res
		ELSIF ~Ip.Broadcast(remAdr) THEN
			TCP.Connect(conC, locPort, remAdr, remPort, C.res);
			IF C.res = TCP.Done THEN C.port := conC;
				C.state := inout; C.Available := TCPAvailable;
				C.Send := TCPSend; C.Receive := TCPReceive;
				Kernel.RegisterObject(C, Cleanup)
			ELSIF C.res # TCP.Timeout THEN C.res := error
			END;
			res := C.res
		ELSE res := error
		END
	ELSE res := error
	END
END OpenConnection;

PROCEDURE CloseConnection* (C: Connection);
BEGIN
	IF C.port IS TCP.Listener THEN C.state := closed;
		TCP.Close(C.port(TCP.Listener))
	ELSIF C.port IS TCP.Connection THEN
		IF C.state = inout THEN C.state := in
		ELSIF C.state = out THEN C.state := closed
		END;
		TCP.Disconnect(C.port(TCP.Connection))
	ELSE HALT(99)
	END;
	C.res := done
END CloseConnection;

PROCEDURE Requested* (C: Connection): BOOLEAN;
BEGIN RETURN (C.port IS TCP.Listener) & TCP.Requested(C.port(TCP.Listener))
END Requested;

PROCEDURE Accept* (C: Connection; VAR newC: Connection; VAR res: INTEGER);
VAR
	conC: TCP.Connection;
BEGIN res := TCP.NotDone;
	IF C.port IS TCP.Listener THEN
		TCP.Accept(C.port(TCP.Listener), conC, res);
		IF res = TCP.Done THEN NEW(newC);
			newC.port := conC; newC.state := inout;
			newC.Available := TCPAvailable;
			newC.Send := TCPSend; newC.Receive := TCPReceive
		END
	END;
	C.res := res
END Accept;

PROCEDURE State* (C: Connection): INTEGER;
BEGIN RETURN C.state
END State;

PROCEDURE Available* (C: Connection): LONGINT;
BEGIN RETURN C.Available(C, C.res)
END Available;

PROCEDURE Read* (C: Connection; VAR ch: CHAR);
BEGIN C.Receive(C, ch, 0, 1, C.res)
END Read;

PROCEDURE ReadBytes* (C: Connection; pos, len: LONGINT; VAR buf: ARRAY OF SYSTEM.BYTE);
BEGIN C.Receive(C, buf, pos, len, C.res);
END ReadBytes;

PROCEDURE ReadInt* (C: Connection; VAR x: INTEGER);
BEGIN C.Receive(C, x, 0, 2, C.res); NetBase.Net2Host(x)
END ReadInt;

PROCEDURE ReadLInt* (C: Connection; VAR x: LONGINT);
BEGIN C.Receive(C, x, 0, 4, C.res); NetBase.NetL2Host(x);
END ReadLInt;

PROCEDURE ReadString* (C: Connection; VAR s: ARRAY OF CHAR);
VAR
	ch, ch0: CHAR;
	i: INTEGER;
BEGIN i := -1; ch := 0X;
	REPEAT INC(i);
		ch0 := ch; C.Receive(C, ch, 0, 1, C.res); s[i] := ch;
	UNTIL (C.res = error) OR (ch = 0X) OR (ch = LF);
	IF (ch = LF) & (ch0 = CR) THEN
		s[i - 1] := 0X ELSE s[i] := 0X
	END
END ReadString;

PROCEDURE Write* (C: Connection; ch: CHAR);
BEGIN C.Send(C, ch, 0, 1, C.res)
END Write;

PROCEDURE WriteBytes* (C: Connection; pos, len: LONGINT; VAR buf: ARRAY OF SYSTEM.BYTE);
BEGIN C.Send(C, buf, pos, len, C.res)
END WriteBytes;

PROCEDURE WriteInt* (C: Connection; x: INTEGER);
BEGIN NetBase.Host2Net(x); C.Send(C, x, 0, 2, C.res)
END WriteInt;

PROCEDURE WriteLInt* (C: Connection; x: LONGINT);
BEGIN NetBase.HostL2Net(x); C.Send(C, x, 0, 4, C.res)
END WriteLInt;

PROCEDURE WriteString* (C: Connection; s: ARRAY OF CHAR);
VAR
	cs: ARRAY 2 OF CHAR;
	i: INTEGER;
BEGIN  i := 0;
	WHILE s[i] # 0X DO INC(i) END;
	C.Send(C, s, 0, i, C.res);
	cs[0] := CR; cs[1] := LF;
	C.Send(C, cs, 0, 2, C.res)
END WriteString;

PROCEDURE GetPartner* (C: Connection; VAR remIP: IPAdr; VAR remPort: INTEGER);
BEGIN remPort := C.port.rport; NetBase.Copy(C.port.rip, remIP, Ip.IpAdrLen)
END GetPartner;

(* Datagram oriented communication *)

PROCEDURE OpenSocket* (VAR S: Socket; locPort: INTEGER; VAR res: INTEGER);
BEGIN
	IF started THEN NEW(S);
		UDP.Open(S.C, locPort, Ip.ipany, Ports.anyport, S.res);
		IF S.res = UDP.Done THEN S.state := inout
		ELSE S.C := NIL; S.res := error
		END;
		res := S.res
	ELSE res := error
	END
END OpenSocket;

PROCEDURE CloseSocket* (S: Socket);
BEGIN S.state := closed; UDP.Close(S.C); S.C := NIL; S.res := done
END CloseSocket;

PROCEDURE SendDG* (S: Socket; remIP: IPAdr; remPort: INTEGER; pos, len: LONGINT; VAR buf: ARRAY OF SYSTEM.BYTE);
VAR
	radr: Ip.IpAdr;
BEGIN NetBase.Copy(remIP, radr, Ip.IpAdrLen);
	UDP.Send(S.C, radr, remPort, buf, pos, len); S.res := done
END SendDG;

PROCEDURE ReceiveDG*(S: Socket; VAR remIP: IPAdr; VAR remPort: INTEGER; pos: LONGINT; VAR len: LONGINT;
	VAR buf: ARRAY OF SYSTEM.BYTE);
VAR
	radr: Ip.IpAdr;
BEGIN UDP.Receive(S.C, radr, remPort, buf, pos, len);
	IF len >= 0 THEN NetBase.Copy(radr, remIP, Ip.IpAdrLen); S.res := done ELSE S.res := error END
END ReceiveDG;

PROCEDURE AvailableDG* (S: Socket): LONGINT;
BEGIN RETURN UDP.Available(S.C)
END AvailableDG;

(* Conversions *)

PROCEDURE PutInt* (VAR buf: ARRAY OF SYSTEM.BYTE; pos: INTEGER; x: INTEGER);
BEGIN NetBase.Host2Net(x);
	SYSTEM.PUT(SYSTEM.ADR(buf[pos]), x)
END PutInt;

PROCEDURE PutLInt* (VAR buf: ARRAY OF SYSTEM.BYTE; pos: INTEGER; x: LONGINT);
BEGIN NetBase.HostL2Net(x);
	SYSTEM.PUT(SYSTEM.ADR(buf[pos]), x)
END PutLInt;

PROCEDURE GetInt* (VAR buf: ARRAY OF SYSTEM.BYTE; pos: INTEGER; VAR x: INTEGER);
BEGIN SYSTEM.GET(SYSTEM.ADR(buf[pos]), x);
	NetBase.Net2Host(x)
END GetInt;

PROCEDURE GetLInt* (VAR buf: ARRAY OF SYSTEM.BYTE; pos: INTEGER; VAR x: LONGINT);
BEGIN SYSTEM.GET(SYSTEM.ADR(buf[pos]), x);
	NetBase.NetL2Host(x)
END GetLInt;

BEGIN NetBase.Copy(Ip.ipany, anyIP, Ip.IpAdrLen);
	NetBase.Copy(Ip.ipall, allIP, Ip.IpAdrLen);
	Texts.OpenWriter(W); started := FALSE; passwords := NIL;
	Start;  Kernel.InstallTermHandler(Stop)
END NetSystem.